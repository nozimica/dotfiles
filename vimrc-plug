call plug#begin('~/.vim/plugged')

""" Repeat
Plug 'tpope/vim-repeat'

""" Fugitive
Plug 'tpope/vim-fugitive', { 'do': 'vim -u NONE -c ''helptags vim-fugitive/doc'' -c q' }

""" Surround
Plug 'tpope/vim-surround'

""" Commentary
Plug 'tpope/vim-commentary'

""" Characterize
Plug 'tpope/vim-characterize'

""" SpeedDating
Plug 'tpope/vim-speeddating'

""" Gundo
" Gundo.vim is Vim plugin to visualize your Vim undo tree.
" Plug 'sjl/gundo.vim', { 'dir': '~/.vim/bundle/gundo' }
Plug 'sjl/gundo.vim'

nnoremap <F5> :GundoToggle<CR>
let g:gundo_prefer_python3 = 1

""" Dispatch
" asynchronous build and test dispatcher
Plug 'tpope/vim-dispatch'

""" SnipMate
Plug 'tomtom/tlib_vim'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'garbas/vim-snipmate'
" Optional:
Plug 'honza/vim-snippets'

" """ flake8
" easy_install --user flake8
" Plug 'nvie/vim-flake8

""" vim-json
Plug 'elzr/vim-json'

""" Easy-align
Plug 'junegunn/vim-easy-align'
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap gA <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap gA <Plug>(EasyAlign)

""" Goyo
" Distraction-free writing in Vim
Plug 'junegunn/goyo.vim'

""" Startify
Plug 'mhinz/vim-startify'
let g:startify_files_number = 16
let g:startify_fortune_use_unicode = 1
let g:startify_custom_header =
            \ 'map(startify#fortune#boxed(), "\"   \".v:val")'
    " \ 'map(split(system("fortune"), "\n"), \" \". v:val")'
    " \ 'map(startify#fortune#boxed(), "\"   \".v:val")'
let g:startify_session_dir = '~/.vim/session'
let g:startify_list_order = ['files', 'dir', 'bookmarks', 'sessions', 'commands']
let g:startify_commands = [
        \ {'N': ['iNstall plugins', 'PlugInstall()']},
        \ {'U': ['Update plugins', 'PlugUpdate()']},
        \ ]
let g:startify_session_persistence = 1
let g:startify_change_to_dir = 1
map <F3> :Startify<CR>

""" Tagbar
Plug 'majutsushi/tagbar'

map <F8> :TagbarToggle<CR>
map! <F8> <ESC>:TagbarToggle<CR>

""" CtrlP
Plug 'ctrlpvim/ctrlp.vim'

map <F7> :CtrlP<CR>
map! <F7> <ESC>:CtrlP<CR>
" Ctrl- P mapping and two custom split keymappings (https://github.com/kien/ctrlp.vim)
let g:ctrlp_map = '<c-p>'
nmap <c-n>s :split<CR><c-w>j<c-p>
nmap <c-n>v :vsplit<CR><c-w>l<c-p>

""" Unite
Plug 'shougo/unite.vim'
" """ Denite
" Plug 'shougo/denite.nvim'

""" Vimfiler
" Powerful file explorer implemented by Vim script
"     Depends on unite.vim.
Plug 'shougo/vimfiler.vim'

" let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_marked_file_icon = '*'

""" fzf
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" """ vim-autotag
" Plug 'craigemery/vim-autotag'
" let g:autotagTagsFile="~/.vim/.tags"
" let g:autotagDisabled=0

Plug 'xolox/vim-easytags'
Plug 'xolox/vim-misc'
let g:easytags_file = "~/.vim/.tags"
let g:easytags_async = 1
" let g:easytags_syntax_keyword = 'always'     " comment if has bad performance
" let g:easytags_by_filetype = "~/.vim"

""" Vim-airline
Plug 'vim-airline/vim-airline'
let g:airline_powerline_fonts = 1
let g:Powerline_symbols='unicode'
let g:airline_skip_empty_sections = 1

"#######################################################
"# Tab completion

" """ SuperTab
" Plug 'ervandew/supertab'

" """ jedi-vim (for Python)
" git clone --recursive https://github.com/davidhalter/jedi-vim.git

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

" Use deoplete.
let g:deoplete#enable_at_startup = 1
if !exists('g:deoplete#omni#input_patterns')
  let g:deoplete#omni#input_patterns = {}
endif
" let g:deoplete#disable_auto_complete = 1
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

" omnifuncs
augroup omnifuncs
  autocmd!
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
augroup end
" tern
if exists('g:plugs["tern_for_vim"]')
  let g:tern_show_argument_hints = 'on_hold'
  let g:tern_show_signature_in_pum = 1
  autocmd FileType javascript setlocal omnifunc=tern#Complete
endif

" deoplete tab-complete
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" tern
autocmd FileType javascript nnoremap <silent> <buffer> gb :TernDef<CR>

" Plug 'zchee/deoplete-jedi'
" Plug 'artur-shaik/vim-javacomplete2'
" autocmd FileType java setlocal omnifunc=javacomplete#Complete

" " Enable jedi source debug messages
" let g:deoplete#enable_profile = 1
" call deoplete#enable_logging('DEBUG', 'deoplete.log')
" call deoplete#custom#source('jedi', 'debug_enabled', 1)

"#######################################################
"# Colors

" Create colors folder if does not exists yet.
" [ ! -d ~/.vim/colors ] && mkdir ~/.vim/colors

""" Sandydune
Plug 'idbrii/vim-sandydune', { 'dir': '~/.vim/colors/vim-sandydune' }

""" Solarized
Plug 'altercation/vim-colors-solarized', { 'dir': '~/.vim/colors/vim-colors-solarized' }

""" vim-matchquote
Plug 'airblade/vim-matchquote'

""" vim-gitgutter
Plug 'airblade/vim-gitgutter'

let g:gitgutter_async = 0
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0

highlight LineNr ctermfg=white ctermbg=DarkGrey guifg=white guibg=DarkGrey
highlight GitGutterAdd          ctermbg=DarkGrey ctermfg=green  guifg=green  cterm=bold gui=bold
highlight GitGutterChange       ctermbg=DarkGrey ctermfg=yellow guifg=yellow cterm=bold gui=bold
highlight GitGutterDelete       ctermbg=DarkGrey ctermfg=red    guifg=red    cterm=bold gui=bold
highlight GitGutterChangeDelete ctermbg=DarkGrey ctermfg=yellow guifg=yellow cterm=bold gui=bold

highlight clear CursorLine
highlight CursorLineNR cterm=bold ctermbg=yellow ctermfg=DarkGrey

" """ YouCompleteMe
" function! BuildYCM(info)
"   " info is a dictionary with 3 fields
"   " - name:   name of the plugin
"   " - status: 'installed', 'updated', or 'unchanged'
"   " - force:  set on PlugInstall! or PlugUpdate!
"   if a:info.status == 'installed' || a:info.force
"     !./install.py
"   endif
" endfunction

" Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }

call plug#end()
